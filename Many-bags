多重背包问题，包含常规的二维暴力枚举和利用二进制枚举的优化方案
#include <bits/stdc++.h>
using namespace std;

const int N = 12010,M = 2010;

/*
正常枚举的方法
int f[N];
int v[N],w[N],s[N];

int main()
{
    int n,m;
    cin>>n>>m;
    for(int i = 0;i < n;i++){
        cin>>v[i]>>w[i]>>s[i];
    }
    for(int i = 0;i < n;i++){
        for(int j = m;j >= v[i];j--){
            for(int k = 0;k <= s[i];k++){
                if(k * v[i] <= j)
                    f[j] = max(f[j],f[j-k*v[i]]+k*w[i]);
            }
        }
    }
    std::cout << f[m] << std::endl;
    return 0;
}
 */
//用二进制优化的方法同时用滚动数组优化
int f[M];
int v[N],w[N];
int cnt;

int main()
{
    int n,m;
    cin>>n>>m;
    for(int i = 1;i <= n;i++)
    {
        int a,b,s;
        cin>>a>>b>>s;
        int k = 1;
        while(k <= s)
        {
            cnt++;
            v[cnt] = k*a;
            w[cnt] = k*b;
            s -= k;
            k *= 2;
        }
        if(s > 0)
        {
            cnt++;
            v[cnt] = a*s;
            w[cnt] = b*s;
        }
    }
    n = cnt;
    //已经变成了01背包问题
    for(int i = 1;i <= n;i++)
        for(int j = m;j >= v[i];j--)
            f[j] = max(f[j],f[j-v[i]]+w[i]);
    cout << f[m] <<endl;
    return 0;
}
