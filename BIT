struct BIT
{
    int tree[N] = {0};
    void update (int i,int x)
    {
        for(int pos = i;pos < N;pos += lowbit(pos))
        {
            tree[pos] += x;
        }
    }
    int query(int n)
    {
        int ans = 0;
        for(int pos = n;pos;pos -= lowbit(pos))
            ans += tree[pos];
        return ans;
    }
}
// 2.
template<typename T>
struct Fenwick{
    int n;
    vector<T> tr;

    Fenwick(int n) : n(n), tr(n + 1, 0){}

    int lowbit(int x){
        return x & -x;
    }

    void modify(int x, T c){
        for(int i = x; i <= n; i += lowbit(i)) tr[i] += c;
    }

    void modify(int l, int r, T c){
        modify(l, c);
        if (r + 1 <= n) modify(r + 1, -c);
    }

    T query(int x){
        T res = T();
        for(int i = x; i; i -= lowbit(i)) res += tr[i];
        return res;
    }

    T query(int l, int r){
        return query(r) - query(l - 1);
    }

};
using BIT = Fenwick<LL>;
