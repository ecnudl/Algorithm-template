//Acwing 853
#include <bits/stdc++.h>

using namespace std;

const int N = 510,M = 10010;
int dist[N],backup[N];
struct Edge{
    int a,b,w;
}edge[M];
int n,m,k;
/*
算法的主要思路是抽屉原理和放缩原理；
如果从1到n在不大于k条边内有路径的话，那么dist[n]就会有意义，从而不是无穷大；
在算法中，backup数组的使用目的是避免在某一次的所有边的遍历中，一个边被多次遍历，从而无法达到不大于k条边的的限制要求；
最后一个不好理解的就是dist[n]为什么要大于0x3f3f3f3f/2的原因就是0x3f3f3f3f是一个固定的数值，我们要判断的是从1到n是否有通路，就比如说，如果从第m个到第n个有一个通路，那么n就会被更新从而不等于0x3f3f3f3f，但是
如果从1到m没有通路的话，按照题目要求我们仍然应该输出impossible，所以我们应该用0x3f3f3f3f/2作为一个判断标准。
*/
void bellman_ford()                                
{
    memset(dist,0x3f,sizeof(dist));
    dist[1] = 0;
    for(int i = 1;i <= k;i++)            //k次循环
    {
        memcpy(backup,dist,sizeof(dist));
        for(int j = 1;j <= m;j++)
        {
            int a = edge[j].a,b = edge[j].b,w = edge[j].w;
            dist[b] = min(dist[b],backup[a] + w);
        }
    }
}

int main()
{
    scanf("%d %d %d",&n,&m,&k);
    for(int i = 1;i <= m;i++)
    {
        int a,b,w;
        scanf("%d %d %d",&a,&b,&w);
        edge[i] = {a,b,w};
    }
    bellman_ford();
    if(dist[n] > 0x3f3f3f3f/2) puts("impossible");
    else printf("%d\n",dist[n]);
    
    return 0;
}
