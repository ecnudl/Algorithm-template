//并查集，普通版+优化版+AcWing版
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1050;
int s[maxn+1];
void init_set()
{
    for(int i = 1;i <= maxn;i++)
    {
        s[i] = i;
    }
}

int height[maxn+1];

void better_init_set()
{
    for(int i = 1;i < maxn;i++)
    {
        s[i] = i;
        height[i] = 0;
    }
}

int find_set(int x)
{
    return x == s[x] ? x : find_set(s[x]);
}

int better_find(int x)
{
    if(x == s[x]) return x;
    else s[x] = better_find(s[x]);
    return s[x];
}

void better_union_set(int x,int y)
{
    x = find_set(x);
    y = find_set(y);
    if(height[x] == height[y]) {
        height[x] = height[x] + 1;
        s[y] = x;
    }
    else{
        if(height[x] < height[y]) s[x] = y;
        else  s[y] = x;
    }
}

void union_set(int x,int y){
    x = find_set(x);
    y = find_set(y);
    if(x != y)s[x] = s[y];
}
int main()
{
    int t,n,m,x,y;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;
        init_set();
        for(int i = 1;i <= m;i++)
        {
            cin>>x>>y;
            union_set(x,y);
        }
        int ans = 0;
        for(int i = 1;i <= n;i++)
            if(s[i] == i)
                ans++;
        cout<<ans<<endl;
    }
    return 0;
}

Acwing：
#include <iostream>

using namespace std;

const int N = 100010;
int p[N];

int find(int x)
{
    if(x != p[x]) p[x] = find(p[x]);
    return p[x];
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n,m;
    cin >> n >> m;
    for(int i = 1;i <= n;i++) p[i] = i;
    for(int i = 0;i < m;i++)
    {
        string s;cin >> s;
        int a,b;
        cin >> a >> b;
        if(s == "M")
        {
            p[find(a)] = find(b);
        }
        else
        {
            if(find(a) == find(b)) cout << "Yes" << endl;
            else cout << "No" << endl;
        }
    }
    
    return 0;
}
