题目：整数划分，eoj加强本
做法一：完全背包。
tips：完全背包用一维数组优化的时候不用逆向枚举第二层，原因是01背包用的是上一层的答案，但是完全背包使用的是目前为止的最优解，所以要一直更新，不用从逆向开始枚举。
int f[N];
int main()
{
    int n;cin >> n;
    f[0] = 1;
    for(int i = 1;i <= n;i++)
        for(int j = i;j <= n;j++)
            f[j] = (f[j] + f[j-i]) % mod;
    cout << f[n] << endl;
    
    return 0;
}
做法二：计数DP
原理：f[i,j]表示数字i被划分成为j个整数，然后开始转移状态并且进行表示/
状态划分为分成的数字里最小值是1和最小值大于1这两部分
A部分可以的时候最小值是1，所以也等于f[i-1,j-1]，这种转换之后数值不变，因为都减了1，方案数是守恒的
B部分的话，因为最小值大于1，所以也等于f[i-j][j],也就是j个数字每个都减去1，那么方案数仍然是不变的。
故状态转移方程为f[i,j] = f[i-1,j-1] + f[i-j,j]
代码：
int f[N][N];
int main()
{
    int n;cin >> n;
    f[0][0] = 1;
    for(int i = 1;i <= n;i++)
        for(int j = 1;j <= i;j++)
            f[i][j] = (f[i-1][j-1] + f[i-j][j]) % mod;
    int res = 0;
    for(int i = 1;i <= n;i++) res = (res + f[n][i]) % mod;
    cout << res << endl;
    
    return 0;
}
