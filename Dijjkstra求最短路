#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;

const int N=510;

int g[N][N];    //为稠密阵所以用邻接矩阵存储
int dist[N];    //用于记录每一个点距离第一个点的距离
bool st[N];     //用于记录该点的最短距离是否已经确定

int n,m;

int Dijkstra()
{
    memset(dist, 0x3f,sizeof dist);     //初始化距离  0x3f代表无限大

    dist[1]=0;  //第一个点到自身的距离为0

    for(int i=0;i<n;i++)      //有n个点所以要进行n次 迭代
    {
        int t=-1;       //t存储当前访问的点

        for(int j=1;j<=n;j++)   //这里的j代表的是从1号点开始
            if(!st[j]&&(t==-1||dist[t]>dist[j]))         //这里可以看出是在寻找最小值，但是复杂度是n，导致总复杂度是n^2所以会想到后面的用优先队列优化的方案
                t=j;

        st[t]=true;   

        for(int j=1;j<=n;j++)           //依次更新每个点所到相邻的点路径值
            dist[j]=min(dist[j],dist[t]+g[t][j]);
    }

    if(dist[n]==0x3f3f3f3f) return -1;  //如果第n个点路径为无穷大即不存在最低路径
    return dist[n];
}
int main()
{
    cin>>n>>m;

    memset(g,0x3f,sizeof g);    //初始化图 因为是求最短路径
                                //所以每个点初始为无限大

    while(m--)
    {
        int x,y,z;
        cin>>x>>y>>z;
        g[x][y]=min(g[x][y],z);     //如果发生重边的情况则保留最短的一条边
    }

    cout<<Dijkstra()<<endl;
    return 0;
}
//用堆也就是优先队列优化的版本，用stl存图
#include <bits/stdc++.h>

using namespace std;

typedef pair<int,int> PII;
const int N = 150010;
vector<PII> P[N];         //存图
bool st[N];
int dist[N];
int n,m;

int dijskta()
{
    memset(dist,0x3f,sizeof(dist));
    dist[1] = 0;
    
    priority_queue<PII,vector<PII>,greater<PII> >heap;
    heap.push({0,1});                              //存下节点1到节点1的距离为0
    while(heap.size())
    {
        auto t = heap.top();
        heap.pop();
        int ver = t.second,d = t.first;            //ver代表节点，d代表1到ver的距离
        if(st[ver]) continue;
        for(int i = 0;i < P[ver].size();i++)
        {
            int j = P[ver][i].first;                   
            if(dist[j] > d + P[ver][i].second) 
            {
                dist[j] = d + P[ver][i].second;
                heap.push({dist[j],j});
            }
        }
        st[ver] = true;
    }
    if(dist[n] == 0x3f3f3f3f) return -1;
    return dist[n];
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    
    cin >> n >> m;
    while(m --)
    {
        int a,b,c;
        cin >> a >> b >> c;
        P[a].push_back({b,c});         //b代表第几个节点，c代表权值a->b
    }
    
    int ans = dijskta();
    
    cout << ans << endl;
    
    return 0;
}
